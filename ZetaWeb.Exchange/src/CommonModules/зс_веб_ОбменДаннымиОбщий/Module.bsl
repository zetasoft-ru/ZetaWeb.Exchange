////////////////////////////////////////////////////////////////////////////////
// зс_веб_ОбменДанными - процедуры и функции для обеспечения обмена с сайтом
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ВыполнитьОбмен(НастройкаОбмена) Экспорт
	
	ПараметрыОбмена = ИнициализироватьПараметрыОбмена(НастройкаОбмена);

	зс_веб_ОбменДаннымиВыгрузка.ВыгрузитьДанныеПоНастройкеОбмена(НастройкаОбмена, ПараметрыОбмена);
	
	//зс_веб_ОбменДаннымиЗагрузка.ЗагрузитьДанныеПоНастройкеОбмена(НастройкаОбмена, ПараметрыОбмена);

КонецПроцедуры // ВыполнитьОбмен()

Процедура ВыполнитьПроверкиНастроекПодсистемыОбмена() Экспорт
	
	зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Начата проверка настроек подсистемы обмена");
	
	ЕстьОшибки = Ложь;
	
	ВидКонфигурации = Константы.зс_веб_Конфигурация.Получить();
	
	Если ВидКонфигурации = Справочники.ЗетаWEBВидыКонфигураций.ПустаяСсылка() Тогда
		
		ЕстьОшибки = Истина;
		
		ОписаниеОшибки = "В настройках обмена с сайтом не установлен вид конфигурации";
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.ПС + "При проверке соответствия объектов обмена и запросов обнаружены следующие ошибки:"
																+ Символы.ПС + ОписаниеОшибки);
																
	КонецЕсли;
															
	ОписаниеОшибки = "";
	
	Если зс_веб_ОбменДаннымиОбщий.СоздатьСервисОбменаССайтом( , ОписаниеОшибки) = Неопределено Тогда
		
		ЕстьОшибки = Истина;
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.ПС + "Не удалось подключится к сервису обмена данными с сайтом по причине: "
																+ Символы.ПС + ОписаниеОшибки
 																+ Символы.ПС + "проверьте настройки обмена с сайтом");
	КонецЕсли;
															
	
	//просто проверим, что все элементы справочника "Объекты обмена" запишутся
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	зс_веб_ОбъектыОбмена.Ссылка
	|ИЗ
	|	Справочник.зс_веб_ОбъектыОбмена КАК зс_веб_ОбъектыОбмена
	|ГДЕ
	|	НЕ зс_веб_ОбъектыОбмена.ЭтоГруппа"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.Записать();
		
	КонецЦикла;
	
	//проверим соответствия объектов обмена и запросов
	ОписаниеОшибки = "";
	ВсеВПорядке = Справочники.зс_веб_ОбъектыОбмена.ПроверитьОбъектыОбменаИЗапросы(ОписаниеОшибки);
	
	Если НЕ ВсеВПорядке Тогда
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.ПС + "При проверке соответствия объектов обмена и запросов обнаружены следующие ошибки:"
																+ Символы.ПС + ОписаниеОшибки);
																
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	// проверим соответствия объектов обмена и запросов
	
	// зетавеб
	
	ОписаниеОшибки = "";
	ВсеВПорядке = Справочники.зс_веб_ОбъектыОбмена.ПроверитьОбъектыОбменаИПланыОбмена(Метаданные.ПланыОбмена.зс_веб_ОбменДаннымиЗетаWeb, Справочники.ЗетаWEBВидыКонфигураций.ЗетаWEB, ОписаниеОшибки);
	
	Если НЕ ВсеВПорядке Тогда
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.ПС + "При проверке соответствия объектов обмена и плана обмена ""зс_веб_ОбменДаннымиЗетаWeb"" обнаружены следующие ошибки:"
																+ Символы.ПС + ОписаниеОшибки);
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	// конфигурация
	
	Если ВидКонфигурации <> Неопределено Тогда
	
		ОписаниеОшибки = "";
		
		ВсеВПорядке = Справочники.зс_веб_ОбъектыОбмена.ПроверитьОбъектыОбменаИПланыОбмена(Метаданные.ПланыОбмена.зс_веб_ОбменДаннымиКонфигурация, ВидКонфигурации, ОписаниеОшибки);
		
		Если НЕ ВсеВПорядке Тогда
			
			зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.ПС + "При проверке соответствия объектов обмена и плана обмена ""зс_веб_ОбменДаннымиКонфигурация"" обнаружены следующие ошибки:"
																	+ Символы.ПС + ОписаниеОшибки);
																	
			ЕстьОшибки = Истина;
			
		КонецЕсли;
																
	КонецЕсли;
	
	Если НЕ ЕстьОшибки Тогда
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.ПС + "Все проверки пройдены успешно");
		
	КонецЕсли;
															
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбновитьСоставУзловОбмена(МетаданныеПланОбмена) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПланаОбмена = МетаданныеПланОбмена.Имя;
	
	ЭтотУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
	ИмяУзлаАвторегистрации = "ZetaWeb";
	
	// удалим неверные узлы
	МассивУзловКУдалению = Новый Массив;
	
	Выборка = ПланыОбмена[ИмяПланаОбмена].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Наименование <> ИмяУзлаАвторегистрации Тогда
		
			МассивУзловКУдалению.Добавить(Выборка.Ссылка);	
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для каждого Узел Из МассивУзловКУдалению Цикл
	
		Если Узел <> ЭтотУзел Тогда
			
			УзелОбъект = Узел.ПолучитьОбъект();
			УзелОбъект.Удалить();
			
		КонецЕсли;
	
	КонецЦикла;
	
	// просто добавм в план обмена узел с именем узла авторегистрации, если его нет
	Если ПланыОбмена[ИмяПланаОбмена].НайтиПоНаименованию(ИмяУзлаАвторегистрации) = ПланыОбмена[ИмяПланаОбмена].ПустаяСсылка() Тогда
	
		НовыйУзел = ПланыОбмена[ИмяПланаОбмена].СоздатьУзел();
		
		Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
		Хеширование.Добавить(ИмяУзлаАвторегистрации);
		НовыйУзел.Код = Строка(Хеширование.ХешСумма);
		
		НовыйУзел.Наименование = ИмяУзлаАвторегистрации;
		
		НовыйУзел.Записать();
		
	КонецЕсли;

КонецПроцедуры // ОбновитьСоставУзловОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьПараметрыОбмена(НастройкаОбмена = Неопределено) Экспорт
	
	НачалоОбмена = ТекущаяДатаСеанса();
	
	Если НастройкаОбмена = Неопределено Тогда
		
		НастройкаОбмена = Справочники.зс_веб_НастройкиОбмена.ПустаяСсылка();
		
		НаборЗаписейЛогаОбмена = Неопределено;
		
	Иначе
	
		НаборЗаписейЛогаОбмена = РегистрыСведений.ЗетаWEBЛогОбменаССайтом.СоздатьНаборЗаписей();
		НаборЗаписейЛогаОбмена.Отбор.Настройка1C2WEB.Установить(НастройкаОбмена);
		НаборЗаписейЛогаОбмена.Отбор.Период.Установить(НачалоОбмена);
		НаборЗаписейЛогаОбмена.Прочитать();
		
	КонецЕсли;		
	
	КаталогОбменаВыгрузки = Новый Файл(КаталогВременныхФайлов() + Строка(НастройкаОбмена.УникальныйИдентификатор()) + "\Export") ;
	
	Если КаталогОбменаВыгрузки.Существует() Тогда
		
		УдалитьФайлы(КаталогОбменаВыгрузки, "*.*");
		
	Иначе
		
		СоздатьКаталог(КаталогОбменаВыгрузки.ПолноеИмя);	
		
	КонецЕсли;
	
	КаталогОбменаЗагрузки = Новый Файл(КаталогВременныхФайлов() + Строка(НастройкаОбмена.УникальныйИдентификатор()) + "\Import") ;
	
	Если КаталогОбменаЗагрузки.Существует() Тогда
		
		УдалитьФайлы(КаталогОбменаЗагрузки, "*.*");
		
	Иначе
		
		СоздатьКаталог(КаталогОбменаЗагрузки.ПолноеИмя);	
		
	КонецЕсли;
		
	СтруктураПараметровОбмена = Новый Структура;
	СтруктураПараметровОбмена.Вставить("ВидКонфигурации", Справочники.ЗетаWEBВидыКонфигураций.ПустаяСсылка());
	СтруктураПараметровОбмена.Вставить("РежимОбменаПолный", Ложь);
	СтруктураПараметровОбмена.Вставить("ВыбратьПервые", 0);
	СтруктураПараметровОбмена.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураПараметровОбмена.Вставить("ИдентификаторОбмена", НастройкаОбмена.УникальныйИдентификатор());
	СтруктураПараметровОбмена.Вставить("РазмерПорцииДляВыгрузки", НастройкаОбмена.РазмерПорцииДляВыгрузки);
	СтруктураПараметровОбмена.Вставить("Архивировать", НастройкаОбмена.ИспользоватьZIP);
	СтруктураПараметровОбмена.Вставить("ОчищатьПланОбмена", Истина);
	СтруктураПараметровОбмена.Вставить("КаталогОбменаЗагрузки", КаталогОбменаЗагрузки.ПолноеИмя + "\");
	СтруктураПараметровОбмена.Вставить("КаталогОбменаВыгрузки", КаталогОбменаВыгрузки.ПолноеИмя + "\");
	СтруктураПараметровОбмена.Вставить("НачалоОбмена", НачалоОбмена);
	СтруктураПараметровОбмена.Вставить("НаборЗаписейЛогаОбмена", НаборЗаписейЛогаОбмена);
	СтруктураПараметровОбмена.Вставить("СохранятьВЛогТолькоОшибки", НастройкаОбмена.СохранятьВЛогТолькоОшибки);
	СтруктураПараметровОбмена.Вставить("Таймаут", 0);
	СтруктураПараметровОбмена.Вставить("ЕстьОшибки", Ложь);
	СтруктураПараметровОбмена.Вставить("УдалятьНекорректныеСимволы", НастройкаОбмена.УдалятьНекорректныеСимволы);

	//?? при отказе от старого импорта можно убрать
	СтруктураПараметровОбмена.Вставить("ФабрикаИмпорт", НастройкаОбмена);
	
	Если НастройкаОбмена <> Справочники.зс_веб_НастройкиОбмена.ПустаяСсылка() Тогда
		
		СтруктураПараметровОбмена.ВидКонфигурации = зс_веб_ОбменДаннымиПовтИсп.ПолучитьВидОсновнойКонфигурации();
		СтруктураПараметровОбмена.РежимОбменаПолный = НастройкаОбмена.РежимОбменаПолный;
		
	КонецЕсли;
	
	Возврат СтруктураПараметровОбмена;

КонецФункции // ИнициализироватьПараметрыОбмена()

// Процедура - Записать в лог обмена
//
// Параметры:
//  СтруктураОбмена		 - 	 - 
//  Текст				 - 	 - 
//  ИгнорироватьОшибку	 - 	 - 
//
Процедура ЗаписатьВЛогОбмена(ПараметрыОбмена, Знач Текст, ЭтоОшибка = Ложь, ВажнаяЗапись = Ложь, ВыгрузкаЗавершена = Ложь, ЗагрузкаЗавершена = Ложь) Экспорт
	
	Если ПараметрыОбмена.НаборЗаписейЛогаОбмена = Неопределено Тогда //обмен не начат, лог обмена не инициализирован
		
		ВызватьИсключение "Набор записей лога обмена не инициализирован";
		
	КонецЕсли;
	
	Текст = Строка(ТекущаяДата()) + " # " + Текст;
	
	Если ПараметрыОбмена.СохранятьВЛогТолькоОшибки Тогда
		
		Если НЕ ЭтоОшибка И НЕ ВажнаяЗапись Тогда
			
			ВывестиСостояние(Текст);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоОшибка Тогда
		
		Статус = СтатусСообщения.Важное;
		
		Текст = Символы.ПС + "ОШИБКА: " + Текст + Символы.ПС;
		
	ИначеЕсли ВажнаяЗапись Тогда
		
		Статус = СтатусСообщения.Информация;	
		
	Иначе
		
		Статус = СтатусСообщения.БезСтатуса;
		
	КонецЕсли;
	
	#Если Клиент Тогда
	Сообщить(Текст, Статус);
	#КонецЕсли
	ВывестиСостояние(Текст);

	Если ПараметрыОбмена.НаборЗаписейЛогаОбмена.Количество() = 0 Тогда
		
		Запись = ПараметрыОбмена.НаборЗаписейЛогаОбмена.Добавить();
		Запись.Период = ПараметрыОбмена.НачалоОбмена;
		Запись.ДатаНачала = ПараметрыОбмена.НачалоОбмена;
		Запись.Настройка1C2WEB = ПараметрыОбмена.НастройкаОбмена;
		Запись.Лог = Текст;
		Запись.Активность = Истина;
		Запись.ОшибочнаяЗагрузка = ЭтоОшибка;
		Если ВыгрузкаЗавершена Тогда 
			Запись.ВыгрузкаЗавершена = Истина;
		КонецЕсли;
		Если ЗагрузкаЗавершена Тогда
			Запись.ЗагрузкаЗавершена = Истина;
		КонецЕсли;
		
	Иначе
		
		Запись = ПараметрыОбмена.НаборЗаписейЛогаОбмена[0];
		Запись.Лог = Запись.Лог + Символы.ПС + Текст;
		Запись.ОшибочнаяЗагрузка = Макс(Запись.ОшибочнаяЗагрузка, ЭтоОшибка);
		Если ВыгрузкаЗавершена Тогда 
			Запись.ВыгрузкаЗавершена = Истина;
		КонецЕсли;
		Если ЗагрузкаЗавершена Тогда
			Запись.ЗагрузкаЗавершена = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбмена.НаборЗаписейЛогаОбмена.Записать();
	
КонецПроцедуры

// Функция - Создать сервис обмена с сайтом
// 
// Возвращаемое значение:
//   - 
//
Функция СоздатьСервисОбменаССайтом(ПараметрыОбмена = Неопределено, ОписаниеОшибки = "") Экспорт
	
	ПутьКВебСервису = Константы.ЗетаWEBАдресСервисаОбменаДанными.Получить();
	Пользователь 	= Константы.ЗетаWEBПользовательСервисаОбменаДанными.Получить();
	Пароль 			= Константы.ЗетаWEBПарольСервисаОбменаДанными.Получить();
	
	Таймаут = 0;
	
	Если ПараметрыОбмена <> Неопределено Тогда
	
		Таймаут = ПараметрыОбмена.Таймаут;
		
	КонецЕсли;
	
	Попытка		
		
		Если Лев(ПутьКВебСервису, 5) = "https" Тогда
			
			SSL = Новый ЗащищенноеСоединениеOpenSSL(
            Новый СертификатКлиентаWindows(),
            Новый СертификатыУдостоверяющихЦентровWindows());
			
			WSОпределение = Новый WSОпределения(ПутьКВебСервису, Пользователь, Пароль, , , SSL);
			Сервис = Новый WSПрокси(WSОпределение, "http://zetasoft.ru/", "Transfer1C2WEB", "Transfer1C2WEBSoap12", , Таймаут, SSL);
			
		Иначе
			
			WSОпределение = Новый WSОпределения(ПутьКВебСервису, Пользователь, Пароль);
			Сервис = Новый WSПрокси(WSОпределение, "http://zetasoft.ru/", "Transfer1C2WEB", "Transfer1C2WEBSoap12", , Таймаут);
			
		КонецЕсли;			
		
		Сервис.Пользователь = Пользователь;
		Сервис.Пароль = Пароль;
		
		Возврат Сервис;
		
	Исключение
		
		ОписаниеОшибки = "Не удалось создать веб-сервис для обмена с сайтом по причине: " + Символы.ПС + ОписаниеОшибки();
		
		Если ПараметрыОбмена <> Неопределено Тогда
			
			ЗаписатьВЛогОбмена(ПараметрыОбмена, ОписаниеОшибки, Истина);
			
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;

КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьВерсиюСайта() Экспорт

	СтруктураВерсии = Новый Структура;
	СтруктураВерсии.Вставить("ВерсияСайта", "");
	СтруктураВерсии.Вставить("ВерсияБазыДанных", "");
	СтруктураВерсии.Вставить("ОжидаемаяВерсияБазыДанных", "");
	СтруктураВерсии.Вставить("ДатаОбновленияБазыДанных", Дата(1, 1, 1, 0, 0, 0));
	
	АдресСайта = Константы.ЗетаWEBАдресСервисаОбменаДанными.Получить();
	АдресСайта = СтрЗаменить(АдресСайта, "http://", "");
	ПозицияПервогоСлэша = СтрНайти(АдресСайта, "/");
	АдресСайта = Лев(АдресСайта, ПозицияПервогоСлэша - 1);
	
	Ответ = зс_всг_ЗапросHTTP.ПолучитьОтветНаЗапрос(Ложь, АдресСайта, "/api/version/getversion");
	
	Если Ответ.КодСостояния = 200 Тогда
		
		СтруктураОтвета = зс_веб_РаботаСJSON.ПрочитатьJSONПрограммно(Ответ.ТелоОтвета, , , Истина);
		
		СтруктураВерсии.ВерсияСайта = СтруктураОтвета.Cms;
		СтруктураВерсии.ВерсияБазыДанных = СтруктураОтвета.Db;
		СтруктураВерсии.ОжидаемаяВерсияБазыДанных = СтруктураОтвета.DbExpected;
		
		ДатаСтрокой = Лев(СтруктураОтвета.DbUpdatedAt, 19);
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "-", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "T", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", "");
		
		СтруктураВерсии.ДатаОбновленияБазыДанных = Дата(ДатаСтрокой);;
		
	КонецЕсли;
	
	Возврат СтруктураВерсии;

КонецФункции // ПолучитьВерсиюСайта()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКоличествоЗаписейДляОбмена(НастройкаОбмена, МассивОбъектовОбмена = Неопределено) Экспорт

	КоличествоЗаписейДляОбмена = Новый Соответствие;
	
	Если МассивОбъектовОбмена = Неопределено Тогда
		
		ОтборПоОбъектамОбмена = НЕ МассивОбъектовОбмена = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", НастройкаОбмена);
		Запрос.УстановитьПараметр("ОтборПоОбъектамОбмена", ОтборПоОбъектамОбмена);
		Запрос.УстановитьПараметр("МассивОбъектовОбмена", МассивОбъектовОбмена);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена КАК ОбъектОбмена
		|ИЗ
		|	РегистрСведений.зс_веб_ЗначенияНастроекОбмена КАК зс_веб_ЗначенияНастроекОбмена
		|ГДЕ
		|	зс_веб_ЗначенияНастроекОбмена.Настройка = &Настройка
		|	И ВЫБОР
		|			КОГДА &ОтборПоОбъектамОбмена
		|				ТОГДА зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена В (&МассивОбъектовОбмена)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена.РодительскийОбъектОбмена
		|ИЗ
		|	РегистрСведений.зс_веб_ЗначенияНастроекОбмена КАК зс_веб_ЗначенияНастроекОбмена
		|ГДЕ
		|	зс_веб_ЗначенияНастроекОбмена.Настройка = &Настройка
		|	И зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена.РодительскийОбъектОбмена.НеУчаствуетВОбмене
		|	И ВЫБОР
		|			КОГДА &ОтборПоОбъектамОбмена
		|				ТОГДА зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена В (&МассивОбъектовОбмена)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ"		
		;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		МассивОбъектовОбмена = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектОбмена");
		
	КонецЕсли;
	
	ПараметрыОбмена = ИнициализироватьПараметрыОбмена(НастройкаОбмена);
	
	ТаблицаНастроекВыгрузки = ПолучитьТаблицуНастроекОбмена(ПараметрыОбмена, МассивОбъектовОбмена);
	
	ТекстЗапросаКоличество = "";
	
	ЕстьЗапрос = Ложь;
	
	СоответствиеИменПараметровИУзловОбмена = Новый Соответствие;
	
	Для Каждого НастройкаВыгрузки Из ТаблицаНастроекВыгрузки Цикл
		
		Если Не ЗначениеЗаполнено(НастройкаВыгрузки.ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьЗапрос = Истина;
		
		ИмяПараметра = "ПО1C2WEB" + НастройкаВыгрузки.ИмяМетаданныхСТипом;
		
		СоответствиеИменПараметровИУзловОбмена.Вставить(ИмяПараметра, НастройкаВыгрузки.УзелПланаОбмена);
		
		ТекстЗапроса = СтрЗаменить(НастройкаВыгрузки.ТекстЗапроса, "ПО1C2WEB", ИмяПараметра); 
		
		Если НЕ ТаблицаНастроекВыгрузки.Индекс(НастройкаВыгрузки) = 0 Тогда
			
			ТекстЗапросаКоличество = ТекстЗапросаКоличество + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			
		КонецЕсли;
		
		ТекстЗапросаКоличество = ТекстЗапросаКоличество + 
			Символы.Таб + "ВЫБРАТЬ" + 
			//Символы.ПС + Символы.Таб + Символы.Таб + """" + ?(НастройкаВыгрузки.ТипОбъекта = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.ТЧ, НастройкаВыгрузки.ИмяМетаданныхРодительскогоОбъекта, "") + НастройкаВыгрузки.ИмяМетаданных + НастройкаВыгрузки.ТипОбъектаСтрокой + """ КАК Справочник," + 
			Символы.ПС + Символы.Таб + Символы.Таб + """" + НастройкаВыгрузки.ИмяМетаданныхСТипом + """ КАК Справочник," + 
			Символы.ПС + Символы.Таб + Символы.Таб + "КОЛИЧЕСТВО(1) КАК Количество" + 
			Символы.ПС + Символы.Таб + "ИЗ" + 
			Символы.ПС + Символы.Таб + "(" + 
			Символы.ПС + Символы.Таб + Символы.Таб + СтрЗаменить(ТекстЗапроса, Символы.ПС, Символы.ПС + Символы.Таб + Символы.Таб) +			
			Символы.ПС + Символы.Таб + ") КАК Временная";
		
	КонецЦикла;
	
	Если ЕстьЗапрос = Истина Тогда
		
		Запрос = Новый Запрос;
		
		Для каждого ИмяПараметраИУзел Из СоответствиеИменПараметровИУзловОбмена Цикл
			
			Запрос.УстановитьПараметр(ИмяПараметраИУзел.Ключ, ИмяПараметраИУзел.Значение); 
		
		КонецЦикла;
		
		Запрос.Текст = "ВЫБРАТЬ" + 
			Символы.ПС + Символы.Таб + "Отчет.Справочник КАК Справочник, Отчет.Количество КАК Количество" + 
			Символы.ПС + "ИЗ" + 
			Символы.ПС + "(" + 
			Символы.ПС + ТекстЗапросаКоличество + 
			Символы.ПС + ") КАК Отчет" + 
			Символы.ПС + "УПОРЯДОЧИТЬ ПО" + 
			Символы.ПС + Символы.Таб + "Справочник";
			
		Попытка
				
			РезультатКоличества = Запрос.Выполнить();
			
			Выборка = РезультатКоличества.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НастройкаВыгрузки = ТаблицаНастроекВыгрузки.Найти(Выборка.Справочник, "ИмяМетаданныхСТипом"); 
				
				Если НастройкаВыгрузки <> Неопределено Тогда
				
					КоличествоЗаписейДляОбмена.Вставить(НастройкаВыгрузки.ОбъектОбмена, Выборка.Количество);
					
				Иначе
					
					Сообщить(Выборка.Справочник);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Исключение
			
			зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При подсчете количество записей обмена произошла ошибка: " + Символы.ПС + ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат КоличествоЗаписейДляОбмена;

КонецФункции // ПолучитьКоличествоЗаписейДляОбмена()

Функция ПолучитьИмяТипаМетаданныхПоТипуОбъекта(ТипОбъекта) Экспорт
	
	Если ТипОбъекта = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.Спр Тогда
		
		Возврат "Справочники";
		
	ИначеЕсли ТипОбъекта = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.Док Тогда
		
		Возврат "Документы";
		
	ИначеЕсли ТипОбъекта = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.ПВХ Тогда
		
		Возврат "ПланыВидовХарактеристик";
		
	ИначеЕсли ТипОбъекта = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.РегНак Тогда
		
		Возврат "РегистрыНакопления";
	
	ИначеЕсли ТипОбъекта = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.РегСв Тогда
		
		Возврат "РегистрыСведений";
		
	Иначе
		
		ВызватьИсключение "Неизвестный тип объекта обмена: " + Строка(ТипОбъекта);
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// <Описание процедуры>
//
// Параметры:
//  ТекстСообщения	 - 	 - 
//
Процедура ВывестиСостояние(ТекстСообщения)

	#Если Клиент Тогда
	Состояние(ТекстСообщения);
	#КонецЕсли

КонецПроцедуры // ВывестиСостояние()

Функция ЕстьАктивныйОбмен(Наименование) Экспорт
	
	ЗаданиеИспользуется = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Наименование", Наименование);
	
	МассивЗаданий = зс_веб_РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для каждого Задание Из МассивЗаданий Цикл
		
		ЗаданиеИспользуется = зс_веб_РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(Задание);
		
		Если ЗаданиеИспользуется Тогда
			
			Прервать;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ЗаданиеИспользуется;	
	
КонецФункции

Процедура ВыполнитьОбменРегламентнымЗаданием(Ключ) Экспорт
	
	ЗаписьЖурналаРегистрации("зс_веб_ОбменДаннымиОбщий.ВыполнитьОбменРегламентнымЗаданием", , , , Строка(Ключ));
	
	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		
		ЗаписьЖурналаРегистрации("зс_веб_ОбменДаннымиОбщий.ВыполнитьОбменРегламентнымЗаданием", , , , "Не заполнен ключ");
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ТипЗнч(Ключ) = Тип("УникальныйИдентификатор") Тогда
		
		Ключ = Новый УникальныйИдентификатор(Ключ);
		
	КонецЕсли;
	
	НастройкаОбмена = Справочники.зс_веб_НастройкиОбмена.НайтиПоРеквизиту("КлючРегламентногоЗадания", Ключ);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		
		ЗаписьЖурналаРегистрации("зс_веб_ОбменДаннымиОбщий.ВыполнитьОбменРегламентнымЗаданием", , , , "Не найдена настройка обмена с ключом регламентного задания: " + Строка(Ключ));
		
		Возврат;
		
	КонецЕсли;
	
	Если НастройкаОбмена.ПометкаУдаления Тогда
		
		ЗаписьЖурналаРегистрации("зс_веб_ОбменДаннымиОбщий.ВыполнитьОбменРегламентнымЗаданием", , , , "Настройка обмена с ключом регламентного задания: " + Строка(Ключ) + " помечена на удаление");
		
		Возврат;
		
	КонецЕсли;
	
	// не выполнять обмен, если есть активный обмен
	Если ЕстьАктивныйОбмен("зс_веб_ОбменДаннымиССайтом") Тогда 
		
		ЗаписьЖурналаРегистрации("зс_веб_ОбменДаннымиОбщий.ВыполнитьОбменРегламентнымЗаданием", , , , "Есть активный обмен с ключом: " + Строка(Ключ));
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбмен(НастройкаОбмена);
	
КонецПроцедуры

// Функция создает таблицу значений и заполняет ее составом плана обмена 
//
// Параметры:
//  МассивОписанийПлановОбмена  - Структура
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Колонки
//							* ИмяМетаданных - Строка
//							* Тип - ПеречислениеСсылка.ЗетаWEBТипыОбъектовКонфигурации
//							* ТипСтрокой - Строка
//							* Авторегистрация - Булево
//							* ИмяПланаОбмена - ПеречислениеСсылка.зс_веб_ИменаПлановОбмена
//
Функция ЗаполнитьСоставПланаОбмена(МетаданныеПланОбмена) Экспорт
	
	ИмяПланаОбмена = Перечисления.зс_веб_ИменаПлановОбмена[МетаданныеПланОбмена.Имя];
	
    СоставПланаОбмена = Новый ТаблицаЗначений;
    СоставПланаОбмена.Колонки.Добавить("ИмяМетаданных", 	Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
    СоставПланаОбмена.Колонки.Добавить("Тип", 				Новый ОписаниеТипов("ПеречислениеСсылка.ЗетаWEBТипыОбъектовКонфигурации"));
    СоставПланаОбмена.Колонки.Добавить("ТипСтрокой", 		Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
    СоставПланаОбмена.Колонки.Добавить("Авторегистрация", 	Новый ОписаниеТипов("Булево"));
    СоставПланаОбмена.Колонки.Добавить("ИмяПланаОбмена", 	Новый ОписаниеТипов("ПеречислениеСсылка.зс_веб_ИменаПлановОбмена"));
		
	Состав = МетаданныеПланОбмена.Состав;

	// заполняем таблицу значений составом 
	Для каждого Элемент из Состав Цикл
	    
	    Стр = СоставПланаОбмена.Добавить();
		
		Если Элемент.Авторегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
	    	Стр.Авторегистрация = Истина;
		Иначе
			Стр.Авторегистрация = Ложь;
		КонецЕсли;
		
	    Стр.ИмяМетаданных = Элемент.Метаданные.Имя;
		
		ПолноеИмяМетаданных = Элемент.Метаданные.ПолноеИмя();
		
		ТипМетаданных = Лев(ПолноеИмяМетаданных, Найти(ПолноеИмяМетаданных, ".") - 1);
		
		Если ТипМетаданных = "Справочник" Тогда
		
	    	Стр.Тип = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.Спр;
			Стр.ТипСтрокой = "Спр";
			
		ИначеЕсли ТипМетаданных = "Документ" Тогда
		
	    	Стр.Тип = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.Док;
			Стр.ТипСтрокой = "Док";
			
		ИначеЕсли ТипМетаданных = "ПланВидовХарактеристик" Тогда
		
	    	Стр.Тип = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.ПВХ;
			Стр.ТипСтрокой = "ПВХ";
			
		ИначеЕсли ТипМетаданных = "РегистрНакопления" Тогда
		
			Стр.Тип = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.РегНак;
			Стр.ТипСтрокой = "РегНак";
		
		ИначеЕсли ТипМетаданных = "РегистрСведений" Тогда
		
	    	Стр.Тип = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.РегСв;
			Стр.ТипСтрокой = "РегСв";
			
		Иначе
			
	    	Стр.Тип = Перечисления.ЗетаWEBТипыОбъектовКонфигурации.ПустаяСсылка();
			Стр.ТипСтрокой = "";
			
		КонецЕсли;
		
		Стр.ИмяПланаОбмена = ИмяПланаОбмена;
        
	КонецЦикла;
		
    Возврат СоставПланаОбмена;
    
КонецФункции   // ЗаполнитьСоставОбмена(ПланОбмена) Экспорт

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТаблицуНастроекОбмена(ПараметрыОбмена, МассивОбъектовОбмена, ТолькоЗагрузка = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектовОбмена", МассивОбъектовОбмена);
	Запрос.УстановитьПараметр("КонфигурацияЗетаВеб", Справочники.ЗетаWEBВидыКонфигураций.ЗетаWEB);
	Запрос.УстановитьПараметр("ПрикладнаяКонфигурация", ПараметрыОбмена.ВидКонфигурации);
	Запрос.УстановитьПараметр("РежимОбменаПолный", ПараметрыОбмена.РежимОбменаПолный);
	Запрос.УстановитьПараметр("НаименованиеУзлаАвторегистрации", "ZetaWeb");
	Запрос.УстановитьПараметр("ТолькоЗагрузка", ТолькоЗагрузка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	зс_веб_ОбменДаннымиЗетаWeb.Ссылка КАК УзелПланаОбмена,
	|	зс_веб_ОбменДаннымиЗетаWeb.Наименование КАК НаименованиеУзла,
	|	ЗНАЧЕНИЕ(Перечисление.зс_веб_ИменаПлановОбмена.зс_веб_ОбменДаннымиЗетаWeb) КАК ИмяПланаОбмена
	|ПОМЕСТИТЬ втУзлыПлановОбмена
	|ИЗ
	|	ПланОбмена.зс_веб_ОбменДаннымиЗетаWeb КАК зс_веб_ОбменДаннымиЗетаWeb
	|ГДЕ
	|	зс_веб_ОбменДаннымиЗетаWeb.Наименование = &НаименованиеУзлаАвторегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	зс_веб_ОбменДаннымиКонфигурация.Ссылка,
	|	зс_веб_ОбменДаннымиКонфигурация.Наименование,
	|	ЗНАЧЕНИЕ(Перечисление.зс_веб_ИменаПлановОбмена.зс_веб_ОбменДаннымиКонфигурация)
	|ИЗ
	|	ПланОбмена.зс_веб_ОбменДаннымиКонфигурация КАК зс_веб_ОбменДаннымиКонфигурация
	|ГДЕ
	|	зс_веб_ОбменДаннымиКонфигурация.Наименование = &НаименованиеУзлаАвторегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА зс_веб_ЗапросыОбъектовОбмена.ВидКонфигурации = &КонфигурацияЗетаВеб
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК МаксимальныйВидКонфигурации
	|ПОМЕСТИТЬ втМаксимальныйВидКонфигурации
	|ИЗ
	|	РегистрСведений.зс_веб_ЗапросыОбъектовОбмена КАК зс_веб_ЗапросыОбъектовОбмена
	|ГДЕ
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена В(&МассивОбъектовОбмена)
	|	И (зс_веб_ЗапросыОбъектовОбмена.ВидКонфигурации = &КонфигурацияЗетаВеб
	|			ИЛИ зс_веб_ЗапросыОбъектовОбмена.ВидКонфигурации = &ПрикладнаяКонфигурация)
	|
	|СГРУППИРОВАТЬ ПО
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ТипОбъекта КАК ТипОбъекта,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ТипОбъектаСтрокой КАК ТипОбъектаСтрокой,
	|	зс_веб_ЗапросыОбъектовОбмена.ИмяМетаданных КАК ИмяМетаданных,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ТипОбъектаСтрокой КАК ИмяМетаданныхСТипом,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ИмяМетаданныхНаСайте КАК ИмяМетаданныхНаСайте,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.РодительскийОбъектОбмена КАК РодительскийОбъектОбмена,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ИмяМетаданныхНаСайте + зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ТипОбъектаСтрокой КАК ИмяМетаданныхНаСайтеСТипом,
	|	ВЫБОР
	|		КОГДА &ТолькоЗагрузка
	|			ТОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ПорядокВыгрузки
	|		ИНАЧЕ зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ПорядокЗагрузки
	|	КОНЕЦ КАК ПорядокОбмена,
	|	ВЫБОР
	|		КОГДА &РежимОбменаПолный
	|			ТОГДА зс_веб_ЗапросыОбъектовОбмена.ЗапросПолный
	|		ИНАЧЕ зс_веб_ЗапросыОбъектовОбмена.ЗапросИзменения
	|	КОНЕЦ КАК ТекстЗапроса,
	|	ВЫБОР
	|		КОГДА &РежимОбменаПолный
	|			ТОГДА зс_веб_ЗапросыОбъектовОбмена.ЗапросРазделителиПолный
	|		ИНАЧЕ зс_веб_ЗапросыОбъектовОбмена.ЗапросРазделителиИзменения
	|	КОНЕЦ КАК ТекстЗапросаРазделители,
	|	ВЫБОР
	|		КОГДА &РежимОбменаПолный
	|			ТОГДА зс_веб_ЗапросыОбъектовОбмена.УсловиеРазделителяВПолномОбмене
	|		ИНАЧЕ зс_веб_ЗапросыОбъектовОбмена.УсловиеРазделителяВОбменеИзменениями
	|	КОНЕЦ КАК УсловиеРазделителя,
	|	зс_веб_ЗапросыОбъектовОбмена.ИспользоватьРазделителиОбмена КАК ИспользоватьРазделителиОбмена,
	|	зс_веб_ЗапросыОбъектовОбмена.РасширенныйИмпорт КАК РасширенныйИмпорт,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.НеУчаствуетВОбмене КАК НеУчаствуетВОбмене,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ИмяПланаОбмена КАК ИмяПланаОбмена,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.Код КАК НомерСообщения
	|ПОМЕСТИТЬ втЗапросы
	|ИЗ
	|	РегистрСведений.зс_веб_ЗапросыОбъектовОбмена КАК зс_веб_ЗапросыОбъектовОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныйВидКонфигурации КАК втМаксимальныйВидКонфигурации
	|		ПО зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена = втМаксимальныйВидКонфигурации.ОбъектОбмена
	|			И (ВЫБОР
	|				КОГДА втМаксимальныйВидКонфигурации.МаксимальныйВидКонфигурации = 0
	|					ТОГДА зс_веб_ЗапросыОбъектовОбмена.ВидКонфигурации = &КонфигурацияЗетаВеб
	|				ИНАЧЕ зс_веб_ЗапросыОбъектовОбмена.ВидКонфигурации = &ПрикладнаяКонфигурация
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТолькоЗагрузка
	|				ТОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ЗагружатьОбъектССайта
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапросы.ОбъектОбмена КАК ОбъектОбмена,
	|	втЗапросы.ТипОбъекта КАК ТипОбъекта,
	|	втЗапросы.ТипОбъектаСтрокой КАК ТипОбъектаСтрокой,
	|	втЗапросы.ИмяМетаданных КАК ИмяМетаданных,
	|	ВЫБОР
	|		КОГДА втЗапросы.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ЗетаWEBТипыОбъектовКонфигурации.ТЧ)
	|			ТОГДА втРодительскиеЗапросы.ИмяМетаданных + втЗапросы.ИмяМетаданных + втЗапросы.ТипОбъектаСтрокой
	|		ИНАЧЕ втЗапросы.ИмяМетаданных + втЗапросы.ТипОбъектаСтрокой
	|	КОНЕЦ КАК ИмяМетаданныхСТипом,
	|	втЗапросы.ИмяМетаданныхНаСайте КАК ИмяМетаданныхНаСайте,
	|	ВЫБОР
	|		КОГДА втЗапросы.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ЗетаWEBТипыОбъектовКонфигурации.ТЧ)
	|			ТОГДА втРодительскиеЗапросы.ИмяМетаданных + втЗапросы.ИмяМетаданныхНаСайте + втЗапросы.ТипОбъектаСтрокой
	|		ИНАЧЕ втЗапросы.ИмяМетаданныхНаСайте + втЗапросы.ТипОбъектаСтрокой
	|	КОНЕЦ КАК ИмяМетаданныхНаСайтеСТипом,
	|	втЗапросы.РасширенныйИмпорт КАК РасширенныйИмпорт,
	|	втЗапросы.РодительскийОбъектОбмена КАК РодительскийОбъектОбмена,
	|	втЗапросы.ПорядокОбмена КАК ПорядокОбмена,
	|	втРодительскиеЗапросы.ИмяМетаданных КАК ИмяМетаданныхРодительскогоОбъекта,
	|	втРодительскиеЗапросы.ИмяМетаданныхНаСайте КАК ИмяМетаданныхНаСайтеРодительскогоОбъекта,
	|	втРодительскиеЗапросы.ТипОбъекта КАК ТипРодительскогоОбъекта,
	|	втРодительскиеЗапросы.ТипОбъектаСтрокой КАК ТипРодительскогоОбъектаСтрокой,
	|	втРодительскиеЗапросы.РасширенныйИмпорт КАК РодительскийОбъектРасширенныйИмпорт,
	|	втЗапросы.ТекстЗапроса КАК ТекстЗапроса,
	|	втЗапросы.ТекстЗапросаРазделители КАК ТекстЗапросаРазделители,
	|	втЗапросы.УсловиеРазделителя КАК УсловиеРазделителя,
	|	втЗапросы.ИспользоватьРазделителиОбмена КАК ИспользоватьРазделителиОбмена,
	|	втУзлыПлановОбмена.УзелПланаОбмена КАК УзелПланаОбмена,
	|	втЗапросы.НомерСообщения КАК НомерСообщения
	|ИЗ
	|	втЗапросы КАК втЗапросы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУзлыПлановОбмена КАК втУзлыПлановОбмена
	|		ПО втЗапросы.ИмяПланаОбмена = втУзлыПлановОбмена.ИмяПланаОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗапросы КАК втРодительскиеЗапросы
	|		ПО втЗапросы.РодительскийОбъектОбмена = втРодительскиеЗапросы.ОбъектОбмена
	|ГДЕ
	|	НЕ втЗапросы.НеУчаствуетВОбмене"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаНастроек = РезультатЗапроса.Выгрузить();
	
	Если ПараметрыОбмена.ВыбратьПервые > 0 Тогда
		
		Для каждого СтрокаТаблицыНастроек Из ТаблицаНастроек Цикл
		
			КоличествоСтрокой = Формат(ПараметрыОбмена.ВыбратьПервые, "ЧГ=0");
			
			СтрокаТаблицыНастроек.ТекстЗапроса = СтрЗаменить(СтрокаТаблицыНастроек.ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + КоличествоСтрокой); 	
		
	КонецЦикла;
	
	КонецЕсли;

	Возврат ТаблицаНастроек;

КонецФункции // ПолучитьТаблицуНастроекОбмена()

// возвращает последний индекс символа в строке ("-1" - не найден, первый символ индекс - "0")
// Строка - строка, в которой производится поиск
// Подстрока - строка, искомый символ
// Возвращает целое число
Функция LastIndexOf(знач Строка, знач Подстрока) Экспорт
	Строка = ВРег(Строка);
	Подстрока = ВРег(Подстрока);
    если Найти(Строка, Подстрока) = 0 тогда
        возврат -1;
    конецесли;
    
    индекс = 0;
    ЧислоВхождений = СтрЧислоВхождений(Строка, Подстрока);
    для i = 1 по ЧислоВхождений цикл
        индекс = индекс + Найти(Сред(Строка, индекс + 1), Подстрока);    
    конеццикла;
    Возврат индекс - 1;
КонецФункции

#КонецОбласти