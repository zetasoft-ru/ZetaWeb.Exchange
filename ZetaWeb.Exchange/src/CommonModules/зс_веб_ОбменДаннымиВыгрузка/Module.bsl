////////////////////////////////////////////////////////////////////////////////
// зс_веб_ОбменДаннымиЭкспорт: процедуры и функции экспорта данных на сайт
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыгрузитьДанныеПоНастройкеОбмена(НастройкаОбмена, ПараметрыОбмена = Неопределено) Экспорт
	
	ОбменВыполненУспешно = Ложь;

	//инициализируем параметры обмена
	Если ПараметрыОбмена = Неопределено Тогда
		
		ПараметрыОбмена = зс_веб_ОбменДаннымиОбщий.ИнициализироватьПараметрыОбмена(НастройкаОбмена);
		
	КонецЕсли;
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Выгрузка данных начата (" + ?(ПараметрыОбмена.РежимОбменаПолный, "полный обмен", "обмен изменениями") + ")", , Истина, Истина);
	
	//получим массив объектов обмена
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена КАК ОбъектОбмена,
	|	зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена.ПорядокВыгрузки
	|ИЗ
	|	РегистрСведений.зс_веб_ЗначенияНастроекОбмена КАК зс_веб_ЗначенияНастроекОбмена
	|ГДЕ
	|	зс_веб_ЗначенияНастроекОбмена.Настройка = &НастройкаОбмена
	|
	|УПОРЯДОЧИТЬ ПО
	|	зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена.ПорядокВыгрузки"
	;
	
	РезультатЗапроса = Запрос.Выполнить();

	МассивОбъектовОбмена = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектОбмена");
	
	//выгрузим объекты обмена
	ОбменВыполненУспешно = ВыгрузитьОбъектыОбмена(МассивОбъектовОбмена, ПараметрыОбмена);
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Выгрузка данных завершена", , Истина, Истина);
	
	Возврат ОбменВыполненУспешно;
	
КонецФункции // ВыгрузитьДанныеНаСайт()

// Функция - Выгрузить объекты обмена
//
// Параметры:
//  МассивОбъектовОбмена - 	 - 
//  ПараметрыОбмена		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВыгрузитьОбъектыОбмена(МассивОбъектовОбмена, ПараметрыОбмена) Экспорт
	
	//получим массив с данными обмена
	МассивДанныхОбмена = ПолучитьМассивДанныхОбмена(МассивОбъектовОбмена, ПараметрыОбмена);
	
	//архивируем файлы, если необходимо
	Если ПараметрыОбмена.Архивировать Тогда
		
		зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Начато архивирование файлов", Ложь, Истина);
		
		АрхивироватьФайлыОбмена(МассивДанныхОбмена, ПараметрыОбмена);
		
		зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Закончено архивирование файлов", Ложь, Истина);
		
	КонецЕсли;
	
	ФайлыОтправлены = ОтправитьФайлыОбменаНаСайт(ПараметрыОбмена, МассивДанныхОбмена);
	
	Возврат ФайлыОтправлены;

КонецФункции // ВыгрузитьОбъектОбмена()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьСтруктуруДанныхОбмена() Экспорт

	СтруктураДанныхОбмена = Новый Структура;
	СтруктураДанныхОбмена.Вставить("ФайлыОбмена", Новый Массив);
	СтруктураДанныхОбмена.Вставить("НаименованияТаблицОбмена", "");
	СтруктураДанныхОбмена.Вставить("УзелПланаОбмена", Неопределено);
	СтруктураДанныхОбмена.Вставить("МетаданныеОбъектаОбмена", Неопределено);
	СтруктураДанныхОбмена.Вставить("ОчищатьПланОбмена", Истина);
	СтруктураДанныхОбмена.Вставить("НомерСообщения", 0);
	
	Возврат СтруктураДанныхОбмена;

КонецФункции // ИнициализироватьСтруктуруДанныхОбмена()

// Процедура - Результат запроса ВXML
//
// Параметры:
//  РезультатЗапросаПакет	 - 	 - 
//  МассивИменТаблиц		 - 	 - 
//
Функция СериализоватьРезультатЗапросаВXML(ПараметрыОбмена, РезультатЗапросаПакет, МассивИменТаблиц, Сч = 1, РазделительОбмена = Неопределено) Экспорт
	
	МаксимальныйРазмерФайлаВБайтах = 2097152;
	
	ИдентификаторОбмена = ПараметрыОбмена.ИдентификаторОбмена;
	
	РазмерПорцииДляВыгрузки = ?(ПараметрыОбмена.РазмерПорцииДляВыгрузки = 0, 1000, ПараметрыОбмена.РазмерПорцииДляВыгрузки);
	
	Если РазделительОбмена = Неопределено Тогда // для вывода в сообщении о начале выгрузки
		
		РазделительОбменаСтрокой = "";
		
	Иначе
		
		РазделительОбменаСтрокой = " по разделителю обмена: " + Строка(РазделительОбмена);
		
	КонецЕсли;
	
	МассивФайлов = Новый Массив;	
	
	// Сч = 1;
	
	СтруктураФайлаОбмена = СоздатьФайлОбмена(ПараметрыОбмена, МассивИменТаблиц, Сч);
	
	МассивФайлов.Добавить(СтруктураФайлаОбмена.ФайлОбмена);
	
	ВсегоКВыгрузке = 0;
	
	СтрокВыгружено = 0;	
	
	НомерТаблицыДляВыгрузки = 0;
	
	РазмерТекущегоФайлаВБайтах = 0;
	
	Для каждого РезультатЗапроса Из РезультатЗапросаПакет Цикл
	
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		
		ВсегоКВыгрузке = ВыборкаДанных.Количество(); 
		
		КоличествоКолонок = РезультатЗапроса.Колонки.Количество() - 1;
		
		МассивКолонок = Новый Массив;
		
		Для н = 0 По КоличествоКолонок Цикл
			
			МассивКолонок.Добавить(РезультатЗапроса.Колонки[н].Имя);
			
		КонецЦикла;
		
		зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Начата выгрузка: 		"  + МассивИменТаблиц[НомерТаблицыДляВыгрузки] + " (" + Строка(ВсегоКВыгрузке) + РазделительОбменаСтрокой + ")");
		
		Пока ВыборкаДанных.Следующий() Цикл
			
			СтрокВыгружено = СтрокВыгружено + 1;
			
			СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьНачалоЭлемента(МассивИменТаблиц[НомерТаблицыДляВыгрузки]);
			
			СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьНачалоЭлемента("ИмпортИД");		
			СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьТекст(ПроверитьТипИЗаменить(ИдентификаторОбмена, ПараметрыОбмена));			
			СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Для н = 0 по КоличествоКолонок цикл
						
				ТекстЭлемента = ПроверитьТипИЗаменить(ВыборкаДанных[н], ПараметрыОбмена);
				
				Если  ТекстЭлемента = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДлинаТекстаЭлемента = СтрДлина(ТекстЭлемента);
				
				Если ДлинаТекстаЭлемента = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				РазмерТекущегоФайлаВБайтах = РазмерТекущегоФайлаВБайтах + ДлинаТекстаЭлемента * 2;
				
				ИмяКолонки = МассивКолонок[н];
				СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяКолонки);		
				СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьТекст(ТекстЭлемента);			
				СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьКонецЭлемента();			
				
			КонецЦикла;
			
			СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Если РазмерТекущегоФайлаВБайтах > МаксимальныйРазмерФайлаВБайтах ИЛИ 
				Окр(СтрокВыгружено / РазмерПорцииДляВыгрузки) = СтрокВыгружено / РазмерПорцииДляВыгрузки Тогда
			
				ЗакрытьФайлОбмена(СтруктураФайлаОбмена);
				
				Сч = Сч + 1;
				
				СтруктураФайлаОбмена = СоздатьФайлОбмена(ПараметрыОбмена, МассивИменТаблиц, Сч);
				МассивФайлов.Добавить(СтруктураФайлаОбмена.ФайлОбмена);
				
				РазмерТекущегоФайлаВБайтах = 0;
				
				ВывестиСостояние(МассивИменТаблиц[НомерТаблицыДляВыгрузки] + " готово " + СтрокВыгружено + " из " + Строка(ВсегоКВыгрузке));
							
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиСостояние(МассивИменТаблиц[НомерТаблицыДляВыгрузки] + " готово " + СтрокВыгружено + " из " + ВсегоКВыгрузке);	
		
		зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Завершена выгрузка: 	" + МассивИменТаблиц[НомерТаблицыДляВыгрузки]);
		
		НомерТаблицыДляВыгрузки = НомерТаблицыДляВыгрузки + 1;
		
	КонецЦикла;
	
	ЗакрытьФайлОбмена(СтруктураФайлаОбмена);
	
	Возврат МассивФайлов;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьМассивДанныхОбмена(МассивОбъектовОбмена, ПараметрыОбмена) Экспорт
	
	МассивДанныхОбмена = Новый Массив;
	ПустоеЗначениеОбъектовОбмена = Справочники.зс_веб_ОбъектыОбмена.ПустаяСсылка();
	
	//получить запросы для обмена
	ТаблицаНастроекВыгрузки = зс_веб_ОбменДаннымиОбщий.ПолучитьТаблицуНастроекОбмена(ПараметрыОбмена, МассивОбъектовОбмена);
	
	//выполнить запросы для обмена и записать их в файлы
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Начато создание файлов обмена", , Истина);

	//попробуем выполнить запрос для каждой настройки
	//то, что не выполнилось, пропускается, если это выгрузка изменений, то соответствующий узел обмена пропускается
	Для каждого НастройкаВыгрузкиОбъекта Из ТаблицаНастроекВыгрузки Цикл
	
		#Если Клиент Тогда 			
		ОбработкаПрерыванияПользователя();		
		#КонецЕсли	
	
		Если НастройкаВыгрузкиОбъекта.РодительскийОбъектОбмена <> ПустоеЗначениеОбъектовОбмена Тогда //подчиненные выгружаются вместе с родительским
			Продолжить;
		КонецЕсли;
		
		МассивРазделителейОбмена = ПолучитьМассивРазделителейОбмена(ПараметрыОбмена, НастройкаВыгрузкиОбъекта);
		
		Если МассивРазделителейОбмена = Неопределено Тогда // что-то пошло не так с получением разделителей
			Продолжить;
		КонецЕсли;
		
		Если МассивРазделителейОбмена.Количество() > 0 Тогда
			
			МассивФайлов = Новый Массив;
			
			Для каждого РазделительОбмена Из МассивРазделителейОбмена Цикл
			
				СтруктураВозврата = ПолучитьРезультатЗапросаОбмена(ПараметрыОбмена, ТаблицаНастроекВыгрузки, НастройкаВыгрузкиОбъекта, РазделительОбмена);
				
				Если СтруктураВозврата.РезультатЗапросаПакет = Неопределено Тогда // что-то пошло не так с получением результата запроса
					Продолжить;
				КонецЕсли;
				
				РезультатЗапросаПакет = СтруктураВозврата.РезультатЗапросаПакет;
				МассивИменТаблиц = СтруктураВозврата.МассивИменТаблиц;
				НаименованияТаблицОбмена = СтруктураВозврата.НаименованияТаблицОбмена;
				
				Если ПропускатьПустыеЗапросы(ПараметрыОбмена, РезультатЗапросаПакет) Тогда
					Продолжить;
				КонецЕсли;
				
				МассивФайловПорции = СериализоватьРезультатЗапросаВXML(ПараметрыОбмена, РезультатЗапросаПакет, МассивИменТаблиц, МассивФайлов.Количество() + 1, РазделительОбмена);
				
				Для каждого ФайлОбмена Из МассивФайловПорции Цикл
				
					МассивФайлов.Добавить(ФайлОбмена);
				
				КонецЦикла;
			
			КонецЦикла;
			
		Иначе
			
			СтруктураВозврата = ПолучитьРезультатЗапросаОбмена(ПараметрыОбмена, ТаблицаНастроекВыгрузки, НастройкаВыгрузкиОбъекта);
			
			Если СтруктураВозврата.РезультатЗапросаПакет = Неопределено Тогда // что-то пошло не так с получением результата запроса
				Продолжить;
			КонецЕсли;
			
			РезультатЗапросаПакет = СтруктураВозврата.РезультатЗапросаПакет;
			МассивИменТаблиц = СтруктураВозврата.МассивИменТаблиц;
			НаименованияТаблицОбмена = СтруктураВозврата.НаименованияТаблицОбмена;
			
			Если ПропускатьПустыеЗапросы(ПараметрыОбмена, РезультатЗапросаПакет) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивФайлов = СериализоватьРезультатЗапросаВXML(ПараметрыОбмена, РезультатЗапросаПакет, МассивИменТаблиц);
			
		КонецЕсли;
		
		СтруктураДанныхОбмена = ИнициализироватьСтруктуруДанныхОбмена();
		СтруктураДанныхОбмена.ФайлыОбмена = МассивФайлов;
		СтруктураДанныхОбмена.НаименованияТаблицОбмена = НаименованияТаблицОбмена;
		СтруктураДанныхОбмена.УзелПланаОбмена = НастройкаВыгрузкиОбъекта.УзелПланаОбмена;
		СтруктураДанныхОбмена.НомерСообщения = НастройкаВыгрузкиОбъекта.НомерСообщения;
		
		ИмяТипаМетаданных = зс_веб_ОбменДаннымиОбщий.ПолучитьИмяТипаМетаданныхПоТипуОбъекта(НастройкаВыгрузкиОбъекта.ТипОбъекта);
		СтруктураДанныхОбмена.МетаданныеОбъектаОбмена = Метаданные[ИмяТипаМетаданных][НастройкаВыгрузкиОбъекта.ИмяМетаданных];
		
		СтруктураДанныхОбмена.ОчищатьПланОбмена = ПараметрыОбмена.ОчищатьПланОбмена;
	
		МассивДанныхОбмена.Добавить(СтруктураДанныхОбмена);
		
	КонецЦикла;
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Завершено создание файлов обмена", , Истина);
	
	Возврат МассивДанныхОбмена;

КонецФункции // ПолучитьМассивФайловОбмена()

Процедура АрхивироватьФайлыОбмена(МассивДанныхОбмена, ПараметрыОбмена) Экспорт
	
	Для каждого ДанныеОбмена Из МассивДанныхОбмена Цикл
		
		Индекс = 0;
		
		Для каждого ФайлОбмена Из ДанныеОбмена.ФайлыОбмена Цикл
		
			ИмяАрхивированногоФайла = ФайлОбмена.Путь + ФайлОбмена.ИмяБезРасширения + ".zip";
			
			АрхивированыйФайл = Новый ЗаписьZipФайла(ИмяАрхивированногоФайла);
		
			АрхивированыйФайл.Добавить(ФайлОбмена.ПолноеИмя, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
			АрхивированыйФайл.Записать();
			
			УдалитьФайлы(ФайлОбмена.ПолноеИмя);
			
			ДанныеОбмена.ФайлыОбмена[Индекс] = Новый Файл(ИмяАрхивированногоФайла);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьФайлыОбменаНаСайт(ПараметрыОбмена, МассивДанныхОбмена) Экспорт
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Начата отправка файлов на сайт", , Истина);
	
	МаксимальныйРазмерФайлаВБайтах = 2097152;

	СервисОбмена = зс_веб_ОбменДаннымиОбщий.СоздатьСервисОбменаССайтом(ПараметрыОбмена);
	
	Если СервисОбмена = Неопределено Тогда
		
		ПараметрыОбмена.ЕстьОшибки = Истина;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПространствоИмен 			= СервисОбмена.ФабрикаXDTO.Пакеты.Получить("http://www.w3.org/2001/XMLSchema");
	ДвоичныеДанныеТип 			= СервисОбмена.ФабрикаXDTO.Пакеты.Получить("http://www.w3.org/2001/XMLSchema").Получить("base64Binary");
	СтрокаТип 					= СервисОбмена.ФабрикаXDTO.Пакеты.Получить("http://www.w3.org/2001/XMLSchema").Получить("string");
	ЧислоТип 					= СервисОбмена.ФабрикаXDTO.Пакеты.Получить("http://www.w3.org/2001/XMLSchema").Получить("long");
	БулевоТип 					= СервисОбмена.ФабрикаXDTO.Пакеты.Получить("http://www.w3.org/2001/XMLSchema").Получить("boolean");
	УникальныйИдентификаторТип 	= СервисОбмена.ФабрикаXDTO.Пакеты.Получить("http://microsoft.com/wsdl/types/").Получить("guid");		
	
	ФорматФайлаXDTO = СервисОбмена.ФабрикаXDTO.Создать(СтрокаТип, ?(ПараметрыОбмена.Архивировать, "ZIP", "XML"));			
	ИмпортИДXDTO 	= СервисОбмена.ФабрикаXDTO.Создать(УникальныйИдентификаторТип, Строка(ПараметрыОбмена.ИдентификаторОбмена));			
	ПолныйОбменXDTO = СервисОбмена.ФабрикаXDTO.Создать(БулевоТип, ПараметрыОбмена.РежимОбменаПолный);
	
	Для каждого СтруктураДанныхОбмена Из МассивДанныхОбмена Цикл
	
		#Если Клиент Тогда 			
		ОбработкаПрерыванияПользователя();		
		#КонецЕсли
	
		НаименованияТаблицОбмена = СтруктураДанныхОбмена.НаименованияТаблицОбмена;
		
		ИмяФайлаXDTO = СервисОбмена.ФабрикаXDTO.Создать(СтрокаТип, НаименованияТаблицОбмена);			
		
		НомерФайла = 0;
		
		ОшибкаВВыгрузкеТаблицы = Ложь;
		
		ВсегоФайлов = СтруктураДанныхОбмена.ФайлыОбмена.Количество();
		
		Попытка
		
			ОшибкаВВыгрузкеТаблицы = НачатьВыгрузкуТаблицы(СервисОбмена, ПараметрыОбмена, НаименованияТаблицОбмена, ИмяФайлаXDTO, ИмпортИДXDTO);
			
			Для каждого ФайлОбмена Из СтруктураДанныхОбмена.ФайлыОбмена Цикл
				
				#Если Клиент Тогда 			
				ОбработкаПрерыванияПользователя();		
				#КонецЕсли
			
				НомерФайла = НомерФайла + 1;
				
				РазмерФайла = ФайлОбмена.Размер();
				
				//Если РазмерФайла > МаксимальныйРазмерФайлаВБайтах Тогда //разбиваем на части
				//	
				//КонецЕсли;
				
				ДвоичныеДанные = Новый ДвоичныеДанные(ФайлОбмена.ПолноеИмя);
				
				РазмерФайлаXDTO 	= СервисОбмена.ФабрикаXDTO.Создать(ЧислоТип, РазмерФайла);
				ДвоичныеДанныеXDTO 	= СервисОбмена.ФабрикаXDTO.Создать(ДвоичныеДанныеТип, ДвоичныеДанные);
				
				
				Если Не ОшибкаВВыгрузкеТаблицы Тогда		
					
					ОшибкаВВыгрузкеТаблицы = ВыполнитьВыгрузкуТаблицы(СервисОбмена, ПараметрыОбмена, НаименованияТаблицОбмена, ИмяФайлаXDTO, ДвоичныеДанныеXDTO, ФорматФайлаXDTO, ИмпортИДXDTO, Строка(НомерФайла), ВсегоФайлов);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ОшибкаВВыгрузкеТаблицы Тогда
				
				ОшибкаВВыгрузкеТаблицы = ЗавершитьВыгрузкуТаблицы(СервисОбмена, ПараметрыОбмена, НаименованияТаблицОбмена, ИмяФайлаXDTO, ИмпортИДXDTO, ПолныйОбменXDTO);
				
			КонецЕсли;
			
		Исключение
			
			зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Не удалось отправить файлы: " + НаименованияТаблицОбмена + " по причине: " + Символы.ПС + ОписаниеОшибки(), Истина);
			
			ОшибкаВВыгрузкеТаблицы = Истина;
			
		КонецПопытки;
		
		Если НЕ ПараметрыОбмена.РежимОбменаПолный Тогда
			
			//план обмена не очищаем, если в структуре данных обмена стояло - не очищать или есть ошибка в выгрузке
			СтруктураДанныхОбмена.ОчищатьПланОбмена = Мин(СтруктураДанныхОбмена.ОчищатьПланОбмена, НЕ ОшибкаВВыгрузкеТаблицы);
			
		КонецЕсли;
		
		Для каждого ФайлОбмена Из СтруктураДанныхОбмена.ФайлыОбмена Цикл
			
			УдалитьФайлы(ФайлОбмена.ПолноеИмя);
			
		КонецЦикла;
		
		Если ОшибкаВВыгрузкеТаблицы Тогда
			
			ПараметрыОбмена.ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Закончена отправка файлов на сайт");
	
	Если НЕ ПараметрыОбмена.РежимОбменаПолный Тогда
		
		Для каждого СтруктураДанныхОбмена Из МассивДанныхОбмена Цикл
		
			Если СтруктураДанныхОбмена.ОчищатьПланОбмена Тогда
				
				Попытка
				
					ПланыОбмена.УдалитьРегистрациюИзменений(СтруктураДанныхОбмена.УзелПланаОбмена, СтруктураДанныхОбмена.НомерСообщения);
					
				Исключение
					
					//@skip-warning
					зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Не удалось удалить регистрацию изменений для: " 
																				+ СтруктураДанныхОбмена.МетаданныеОбъектаОбмена
																				+ " по причине:" + Символы.ПС + 
																				+ ОписаниеОшибки(), Истина, Истина);
					
				КонецПопытки;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Удалена регистрация изменений", , Истина);
	
	Возврат Истина;

КонецФункции // ОтправитьФайлыОбменаНаСайт()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// <Описание процедуры>
//
// Параметры:
//  ТекстСообщения	 - 	 - 
//
Процедура ВывестиСостояние(ТекстСообщения)

	#Если Клиент Тогда
	Состояние(ТекстСообщения);
	#КонецЕсли

КонецПроцедуры // ВывестиСостояние()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьМассивРазделителейОбмена(ПараметрыОбмена, НастройкаВыгрузкиОбъекта) Экспорт

	МассивРазделителей = Новый Массив;
	
	// если настройка выгрузки объекта предполагает разделитель обмена, то формируем файл в цикле
	РазделятьЗапросПриВыгрузке = НастройкаВыгрузкиОбъекта.ИспользоватьРазделителиОбмена;
	
	Если РазделятьЗапросПриВыгрузке Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПО1C2WEB", НастройкаВыгрузкиОбъекта.УзелПланаОбмена);
		
		Запрос.Текст = НастройкаВыгрузкиОбъекта.ТекстЗапросаРазделители;
		
		Попытка
			
			РезультатЗапроса = Запрос.Выполнить();
			
		Исключение
		
			зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Не удалось сформировать  и выполнить запрос запрос получения разделителей обмена для: " + НастройкаВыгрузкиОбъекта.ИмяМетаданных + НастройкаВыгрузкиОбъекта.ТипОбъектаСтрокой + Символы.ПС + ОписаниеОшибки(), Истина);
			
			Возврат Неопределено;
			
		КонецПопытки;
		
		МассивРазделителей = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("РазделительОбмена");
		
	КонецЕсли;

	Возврат МассивРазделителей;
	
КонецФункции // ПолучитьМассивРазделителейВыгрузки()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьРезультатЗапросаОбмена(ПараметрыОбмена, ТаблицаНастроекВыгрузки, НастройкаВыгрузкиОбъекта, РазделительОбмена = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("РезультатЗапросаПакет", Неопределено);
	СтруктураВозврата.Вставить("МассивИменТаблиц", Новый Массив);
	СтруктураВозврата.Вставить("НаименованияТаблицОбмена", "");
	СтруктураВозврата.Вставить("НомерСообщения", "0");

	Попытка
		
		МассивИменТаблиц = Новый Массив;
		
		МассивИменТаблиц.Добавить(НастройкаВыгрузкиОбъекта.ИмяМетаданныхНаСайте + НастройкаВыгрузкиОбъекта.ТипОбъектаСтрокой);
		НаименованияТаблицОбмена = НастройкаВыгрузкиОбъекта.ИмяМетаданныхНаСайте + НастройкаВыгрузкиОбъекта.ТипОбъектаСтрокой;
		
		МассивОбъектовМетаданных = Новый Массив;
		
		Если НастройкаВыгрузкиОбъекта.ТипОбъекта <> Перечисления.ЗетаWEBТипыОбъектовКонфигурации.ТЧ Тогда
			
			ИмяТипаМетаданных = зс_веб_ОбменДаннымиОбщий.ПолучитьИмяТипаМетаданныхПоТипуОбъекта(НастройкаВыгрузкиОбъекта.ТипОбъекта);
			МетаданныеОбъектаОбмена = Метаданные[ИмяТипаМетаданных][НастройкаВыгрузкиОбъекта.ИмяМетаданных];
			МассивОбъектовМетаданных.Добавить(МетаданныеОбъектаОбмена);
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПО1C2WEB", НастройкаВыгрузкиОбъекта.УзелПланаОбмена);
		
		ТекстЗапроса = НастройкаВыгрузкиОбъекта.ТекстЗапроса;
		
		Если РазделительОбмена <> Неопределено Тогда
			
			// добавим условие по разделителю обмена
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + НастройкаВыгрузкиОбъекта.УсловиеРазделителя;
			
			Запрос.УстановитьПараметр("РазделительОбмена", РазделительОбмена);
		
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		ПараметрыОтбора = Новый Структура("РодительскийОбъектОбмена", НастройкаВыгрузкиОбъекта.ОбъектОбмена);
		НастройкиПодчиненныхОбъектов = ТаблицаНастроекВыгрузки.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого НастройкаПодчиненногоОбъекта Из НастройкиПодчиненныхОбъектов Цикл
			
			Запрос.Текст = Запрос.Текст + Символы.ПС + 
			";" + Символы.ПС +
			"////////////////////////////////////////////////////////////////////////////////" + Символы.ПС + 
			НастройкаПодчиненногоОбъекта.ТекстЗапроса;
			
			МассивИменТаблиц.Добавить(НастройкаВыгрузкиОбъекта.ИмяМетаданныхНаСайте + НастройкаПодчиненногоОбъекта.ИмяМетаданныхНаСайте + НастройкаПодчиненногоОбъекта.ТипОбъектаСтрокой);
			
			Если НастройкаПодчиненногоОбъекта.ТипОбъекта <> Перечисления.ЗетаWEBТипыОбъектовКонфигурации.ТЧ Тогда
				ИмяТипаМетаданных = зс_веб_ОбменДаннымиОбщий.ПолучитьИмяТипаМетаданныхПоТипуОбъекта(НастройкаПодчиненногоОбъекта.ТипОбъекта);
				МетаданныеОбъектаОбмена = Метаданные[ИмяТипаМетаданных][НастройкаВыгрузкиОбъекта.ИмяМетаданных];
				МассивОбъектовМетаданных.Добавить(МетаданныеОбъектаОбмена);
			КонецЕсли;
			
			НаименованияТаблицОбмена = НаименованияТаблицОбмена + ","
										+ ?(НастройкаПодчиненногоОбъекта.ТипОбъектаСтрокой = "ТЧ", НастройкаПодчиненногоОбъекта.ИмяМетаданныхНаСайтеРодительскогоОбъекта, "")
										+ НастройкаПодчиненногоОбъекта.ИмяМетаданныхНаСайте 
										+ НастройкаПодчиненногоОбъекта.ТипОбъектаСтрокой;
		
		КонецЦикла;
									
		// пометим объекты плана обмена номером сообщения, соответстующим объекту обмена
		НачатьТранзакцию();
		
		ПланыОбмена.ВыбратьИзменения(НастройкаВыгрузкиОбъекта.УзелПланаОбмена, НастройкаВыгрузкиОбъекта.НомерСообщения, МассивОбъектовМетаданных); 
		
		ЗафиксироватьТранзакцию();
		
		РезультатЗапросаПакет = Запрос.ВыполнитьПакет();		
		
	Исключение
		
		зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Не удалось сформировать  и выполнить запрос запрос для: " + НастройкаВыгрузкиОбъекта.ИмяМетаданных + НастройкаВыгрузкиОбъекта.ТипОбъектаСтрокой + Символы.ПС + ОписаниеОшибки(), Истина);
		
		Возврат СтруктураВозврата;
		
	КонецПопытки;
	
	СтруктураВозврата.РезультатЗапросаПакет = РезультатЗапросаПакет;
	СтруктураВозврата.МассивИменТаблиц = МассивИменТаблиц;
	СтруктураВозврата.НаименованияТаблицОбмена = НаименованияТаблицОбмена;
	
	Возврат СтруктураВозврата;	

КонецФункции // ПолучитьРезультатЗапросаОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПропускатьПустыеЗапросы(ПараметрыОбмена, РезультатЗапросаПакет) Экспорт

	//в режиме обмена изменениями пропускаем пустые запросы
	Если НЕ ПараметрыОбмена.РежимОбменаПолный Тогда
		
		ЕстьДанныеДляОбмена = Ложь;
		
		Для каждого РезультатЗапроса Из РезультатЗапросаПакет Цикл
			
			ЕстьДанныеДляОбмена = Макс(ЕстьДанныеДляОбмена, НЕ РезультатЗапроса.Пустой());
			
		КонецЦикла;
		
	Иначе
		
		ЕстьДанныеДляОбмена = Истина;
			
	КонецЕсли;
	
	Возврат НЕ ЕстьДанныеДляОбмена

КонецФункции // ПропускатьПустыеЗапросы()

// Создается новый файл через ЗаписьXML, с добавлением корневого элемента "Импорт", файл добавляется в массив файлов;
Функция СоздатьФайлОбмена(ПараметрыОбмена, МассивИменТаблиц, Знач Счетчик)
	
	СтруктураФайлаОбмена = Новый Структура;
	
	ИмяФайла = МассивИменТаблиц[0] + "_" 
				+ Строка(Счетчик) + "_" 
				+ Строка(Новый УникальныйИдентификатор); 
	
	ТекущийФайлОбмена = ПараметрыОбмена.КаталогОбменаВыгрузки + ИмяФайла + ".xml";
	
	ТекущаяЗаписьXML = Новый ЗаписьXML;
	
	ТекущаяЗаписьXML.ОткрытьФайл(ТекущийФайлОбмена);
	
	ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("Импорт");
	
	СтруктураФайлаОбмена.Вставить("ФайлОбмена", Новый Файл(ТекущийФайлОбмена));
	СтруктураФайлаОбмена.Вставить("ЗаписьXML", ТекущаяЗаписьXML);
	
	Возврат СтруктураФайлаОбмена;
	
КонецФункции

// Происходит закрытие файла ЗаписьXML, с добавление корневого элемента "/Импорт".
Процедура ЗакрытьФайлОбмена(СтруктураФайлаОбмена)
	
	СтруктураФайлаОбмена.ЗаписьXML.ЗаписатьКонецЭлемента();		
	СтруктураФайлаОбмена.ЗаписьXML.Закрыть();	
	
КонецПроцедуры

// Сериализация данных
Функция ПроверитьТипИЗаменить(Знач ОбъектПроверки, ПараметрыОбмена)
	
	Попытка
						
		Если НЕ ЗначениеЗаполнено(ОбъектПроверки) Тогда
			
			Возврат Неопределено;
			
		ИначеЕсли ТипЗнч(ОбъектПроверки) = Тип("Число") Тогда
			
			Возврат СериализаторXDTO.XMLСтрока(ОбъектПроверки);
			
		ИначеЕсли ТипЗнч(ОбъектПроверки) = Тип("Дата") Тогда
			
			Если Формат(ОбъектПроверки, "ДФ=дд.ММ.гггг") = "01.01.0001" Тогда
				
				Возврат СериализаторXDTO.XMLСтрока(Формат(ОбъектПроверки, "ДФ=PTЧЧ'H'мм'M'ссS"));
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектПроверки) = Тип("ХранилищеЗначения") Тогда
			
			НовыйОбъект = ОбъектПроверки.Получить();
			
			Если ТипЗнч(НовыйОбъект) = Тип("ДвоичныеДанные") Тогда
				
				Возврат Base64Строка(НовыйОбъект);
				
			ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("Картинка") Тогда
				
				Возврат Base64Строка(НовыйОбъект.ПолучитьДвоичныеДанные());
				
			КонецЕсли;
			
			Возврат Неопределено;
			
		ИначеЕсли ТипЗнч(ОбъектПроверки) = Тип("МоментВремени") Тогда
			
			Возврат Неопределено;		
			
		КонецЕсли;	
		
		Возврат СериализаторXDTO.XMLСтрока(ОбъектПроверки);
		
	Исключение
		
		зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Ошибка при проверке типа: " + ОписаниеОшибки() + "(тип объекта: " + ТипЗнч(ОбъектПроверки) + ")", Истина);
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Функция - Начать выгрузку таблицы
//
// Параметры:
//  СервисОбмена			 - 	 - 
//  ИмяОтправляемойТаблицы	 - 	 - 
//  ИмяФайлаXDTO			 - 	 - 
//  ИмпортИДXDTO			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция НачатьВыгрузкуТаблицы(СервисОбмена, ПараметрыОбмена, ИмяОтправляемойТаблицы, ИмяФайлаXDTO, ИмпортИДXDTO)
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "");						
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Начало выгрузки таблицы " + ИмяОтправляемойТаблицы);						
		
	РезультатОперации = СервисОбмена.StartImportTable(ИмяФайлаXDTO, ИмпортИДXDTO);
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, ИмяОтправляемойТаблицы + ": " + РезультатОперации.Message, НЕ РезультатОперации.IsSuccess);
	
	Возврат НЕ РезультатОперации.IsSuccess;					
	
КонецФункции

// Функция - Выполнить выгрузку таблицы
//
// Параметры:
//  сервис					 - 	 - 
//  имяОтправляемойТаблицы	 - 	 - 
//  имяФайлаXDTO			 - 	 - 
//  двоичныеДанныеXDTO		 - 	 - 
//  форматФайлаXDTO			 - 	 - 
//  импортИДXDTO			 - 	 - 
//  индексФайла				 - 	 - 
//  всегоФайлов				 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВыполнитьВыгрузкуТаблицы(СервисОбмена, ПараметрыОбмена, ИмяОтправляемойТаблицы, ИмяФайлаXDTO, ДвоичныеДанныеXDTO, ФорматФайлаXDTO, ИмпортИДXDTO, ИндексФайла, ВсегоФайлов)
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Выгрузка таблицы " + ИмяОтправляемойТаблицы + " (файл " + ИндексФайла + " из " + ВсегоФайлов + ")");						
		
	РезультатОперации = СервисОбмена.ProcessImportTable(ИмяФайлаXDTO, ДвоичныеДанныеXDTO, ФорматФайлаXDTO, ИмпортИДXDTO);									
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, ИмяОтправляемойТаблицы + " (файл " + ИндексФайла + " из " + ВсегоФайлов + "): " + РезультатОперации.Message, НЕ РезультатОперации.IsSuccess);
		
	Возврат НЕ РезультатОперации.IsSuccess;					
	
КонецФункции

// Функция - Завершить выгрузку таблицы
//
// Параметры:
//  СервисОбмена			 - 	 - 
//  ИмяОтправляемойТаблицы	 - 	 - 
//  ИмяФайлаXDTO			 - 	 - 
//  ИмпортИДXDTO			 - 	 - 
//  ПолныйОбменXDTO			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ЗавершитьВыгрузкуТаблицы(СервисОбмена, ПараметрыОбмена, ИмяОтправляемойТаблицы, ИмяФайлаXDTO, ИмпортИДXDTO, ПолныйОбменXDTO)
	
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, "Ожидание окончания обмена таблицей на сайте: " + ИмяОтправляемойТаблицы);	
				
	РезультатОперации = СервисОбмена.EndImportTable(ИмяФайлаXDTO, ИмпортИДXDTO, ПолныйОбменXDTO);		
		
	зс_веб_ОбменДаннымиОбщий.ЗаписатьВЛогОбмена(ПараметрыОбмена, ИмяОтправляемойТаблицы + ": " + РезультатОперации.Message, НЕ РезультатОперации.IsSuccess);
			
	Возврат Не РезультатОперации.IsSuccess;					
	
КонецФункции

#КонецОбласти