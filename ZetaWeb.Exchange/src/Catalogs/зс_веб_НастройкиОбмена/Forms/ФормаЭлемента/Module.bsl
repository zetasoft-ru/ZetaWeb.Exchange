
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДеревоНастроекОбмена();
	
	ПрочитатьНастройкиЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.КлючРегламентногоЗадания = Новый УникальныйИдентификатор(КлючРегламентногоЗаданияОбмена);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// сохраним регистр настроек
	НаборЗаписей = РегистрыСведений.зс_веб_ЗначенияНастроекОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Настройка.Установить(ТекущийОбъект.Ссылка);
	
	ТаблицаНастроек = ВыгрузитьДеревоЗначенийВТаблицуЗначений(РеквизитФормыВЗначение("ДеревоНастроекОбмена"));
	
	Для каждого СтрокаНастроек Из ТаблицаНастроек Цикл
	
		Если НЕ СтрокаНастроек.ЭтоГруппа И СтрокаНастроек.Включено = 1 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Настройка = ТекущийОбъект.Ссылка;
			
			НоваяЗапись.ОбъектОбмена = СтрокаНастроек.ОбъектОбмена;
			
		КонецЕсли;
	
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// обновим регламентное задание
	ЗаписатьНастройкиЗаданий();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидКонфигурацииПриИзменении(Элемент)
	
	ЗаполнитьДеревоНастроекОбмена();

КонецПроцедуры

&НаКлиенте
Процедура РегламентноеЗаданиеИспользуетсяПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоНастроекОбмена

&НаКлиенте
Процедура ДеревоНастроекОбменаВключеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроекОбмена.ТекущиеДанные;
	
	ПриИзмененииФлагаВключено(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбменССайтом(Команда)
	
	НужноСохранять = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		НужноСохранять = Истина;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		НужноСохранять = Истина;
		
	КонецЕсли;
	
	Если НужноСохранять Тогда
		
		ТекстВопроса = "Перед выполнением обмена нужно сохранить настройки обмена." + Символы.ПС + "Сохранить настройки и выполнить обмен?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Записать();
			
			Модифицированность = Ложь;
			
			НужноСохранять = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ НужноСохранять Тогда
			
		зс_веб_ОбменДаннымиОбщий.ВыполнитьОбмен(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсчитатьКоличествоЗаписей(Команда)
	
	ОбновитьКоличествоЗаписей();

КонецПроцедуры

&НаКлиенте
Процедура ПодсчитатьКоличествоЗаписейДляУзла(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНастроекОбмена.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		МассивОбъектовОбмена = Новый Массив;
		
		Если НЕ ТекущиеДанные.ЭтоГруппа Тогда
			
			МассивОбъектовОбмена.Добавить(ТекущиеДанные.ОбъектОбмена);
			
		КонецЕсли;
		
		ПолучитьПодчиненныеОбъектыОбмена(ТекущиеДанные, МассивОбъектовОбмена);
		
		КоличествоЗаписей = зс_веб_ОбменДаннымиОбщий.ПолучитьКоличествоЗаписейДляОбмена(Объект.Ссылка, МассивОбъектовОбмена);

		ТекущиеДанные.КоличествоЗаписей = КоличествоЗаписей.Получить(ТекущиеДанные.ОбъектОбмена);	
			
		ОбновитьКоличествоЗаписейВПодчиненныхОбъектах(ТекущиеДанные, КоличествоЗаписей);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолныйОбменССайтомДляОбъекта(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНастроекОбмена.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбменОднимОбъектом(ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменИзменениямиССайтомДляОбъекта(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНастроекОбмена.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбменОднимОбъектом(ТекущиеДанные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	Если РасписаниеОбменаССайтом = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеОбменаССайтом);
	
	Если Диалог.ОткрытьМодально() Тогда
		
		РасписаниеОбменаССайтом = Диалог.Расписание;
	
		УстановитьРасписаниеРегламентногоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьДерево(Строки)
	
	МассивСтрок = Новый Массив;
	
	Для каждого Строка из Строки Цикл
		
		Если Строка.Родитель <> Неопределено Тогда
		
			Если Строка.ОбъектОбмена = Строка.Родитель.ОбъектОбмена Тогда
				
				МассивСтрок.Добавить(Строка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Строка.ЭтоГруппа = Строка.ОбъектОбмена.ЭтоГруппа;
		
		Если Строка.ЭтоГруппа Тогда
			
			Строка.ПредставлениеОбъектаОбмена = Строка(Строка.ОбъектОбмена);
			
		КонецЕсли;
		
		ОбработатьДерево(Строка.Строки);
		
	КонецЦикла; 
	
	Для каждого Строка Из МассивСтрок Цикл
	
		Строки.Удалить(Строка);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт

    Если Таблица = Неопределено Тогда
        Таблица = Новый ТаблицаЗначений;
        Для Каждого Колонка Из Дерево.Колонки Цикл
            Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
        КонецЦикла;
    КонецЕсли;
    Для Каждого СтрокаДерева Из Дерево.Строки Цикл
        ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
        ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
    КонецЦикла;
    Возврат Таблица;

КонецФункции //ВыгрузитьДеревоЗначенийВТаблицуЗначений()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьДеревоНастроекОбмена()
	
	МассивВидовКонфигураций = Новый Массив;
	МассивВидовКонфигураций.Добавить(Справочники.ЗетаWEBВидыКонфигураций.ЗетаWEB);
	МассивВидовКонфигураций.Добавить(зс_веб_ОбменДаннымиПовтИсп.ПолучитьВидОсновнойКонфигурации());

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка", Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивВидовКонфигураций", МассивВидовКонфигураций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
	|	ВЫБОР
	|		КОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.РодительскийОбъектОбмена.Наименование ЕСТЬ NULL
	|			ТОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.Наименование
	|		ИНАЧЕ зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.РодительскийОбъектОбмена.Наименование + "" ("" + зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.Наименование + "")""
	|	КОНЕЦ КАК ПредставлениеОбъектаОбмена,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ТипОбъекта КАК ТипОбъекта,
	|	ВЫБОР
	|		КОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена = зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Включено,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ОбъектКонфигурации КАК ОбъектКонфигурации,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ЗагружатьОбъектССайта КАК ЗагружаетсяССайта,
	|	ВЫБОР
	|		КОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена = зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выключено,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	-1 КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.зс_веб_ЗапросыОбъектовОбмена КАК зс_веб_ЗапросыОбъектовОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.зс_веб_ЗначенияНастроекОбмена КАК зс_веб_ЗначенияНастроекОбмена
	|		ПО (зс_веб_ЗначенияНастроекОбмена.Настройка = &Настройка)
	|			И зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена = зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена
	|ГДЕ
	|	зс_веб_ЗапросыОбъектовОбмена.ВидКонфигурации В(&МассивВидовКонфигураций)
	|
	|СГРУППИРОВАТЬ ПО
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ОбъектКонфигурации,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ЗагружатьОбъектССайта,
	|	ВЫБОР
	|		КОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена = зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.РодительскийОбъектОбмена.Наименование ЕСТЬ NULL
	|			ТОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.Наименование
	|		ИНАЧЕ зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.РодительскийОбъектОбмена.Наименование + "" ("" + зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.Наименование + "")""
	|	КОНЕЦ,
	|	зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена.ТипОбъекта,
	|	ВЫБОР
	|		КОГДА зс_веб_ЗапросыОбъектовОбмена.ОбъектОбмена = зс_веб_ЗначенияНастроекОбмена.ОбъектОбмена
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(Включено) = МИНИМУМ(Выключено)
	|			ТОГДА МАКСИМУМ(Включено)
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Включено,
	|	МИНИМУМ(ЭтоГруппа)
	|ПО
	|	ОбъектОбмена ИЕРАРХИЯ"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоСДублями = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ОбработатьДерево(ДеревоСДублями.Строки);
	
	ЗначениеВРеквизитФормы(ДеревоСДублями, "ДеревоНастроекОбмена");

КонецПроцедуры // ЗаполнитьДеревоНастроекОбмена()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПереключитьФлагиВПодчиненныхОбъектах(ТекущиеДанные)

	Для каждого Строка из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Строка.Включено = ТекущиеДанные.Включено;
		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		
		Элементы.ДеревоНастроекОбмена.Развернуть(ИдентификаторСтроки);
		
		Если Строка.ЭтоГруппа Тогда
		
			ПереключитьФлагиВПодчиненныхОбъектах(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПереключитьФлагиВПодчиненныхОбъектах()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПереключитьФлагиВРодительскихЭлементах(ТекущиеДанные)

	РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительскаяСтрока <> Неопределено Тогда
		
		Если ТекущиеДанные.Включено = 2 Тогда
		
			ВсеВключено = Ложь;
			
		Иначе
			
			ВсеВключено = Истина;
			
		КонецЕсли;
		
		Для каждого Строка Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			Если НЕ Строка.Включено Тогда
				
				ВсеВключено = Ложь;
				
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ВсеВключено Тогда
			
			РодительскаяСтрока.Включено = 1;
			
		Иначе
			
			РодительскаяСтрока.Включено = 2;
			
		КонецЕсли;
		
		ПереключитьФлагиВРодительскихЭлементах(РодительскаяСтрока);
		
	КонецЕсли;

КонецПроцедуры // ПереключитьФлагиВРодительскихЭлементах()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПриИзмененииФлагаВключено(ТекущиеДанные)
	
	Модифицированность = Истина;

	Если ТекущиеДанные.Включено = 2 Тогда //из вкл. флага нельзя попасть в неопределенный, можно только в выкл.
		
		ТекущиеДанные.Включено = 0;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
	
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		
		Элементы.ДеревоНастроекОбмена.Развернуть(ИдентификаторСтроки);
		
		ПереключитьФлагиВПодчиненныхОбъектах(ТекущиеДанные);
		
	КонецЕсли;
	
	ПереключитьФлагиВРодительскихЭлементах(ТекущиеДанные);

КонецПроцедуры // ПриИзмененииФлагаВключено()


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОбновитьКоличествоЗаписейВПодчиненныхОбъектах(ТекущиеДанные, КоличествоЗаписей)

	СуммаПоУзлу = 0;
	
	Для каждого Строка из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			ОбновитьКоличествоЗаписейВПодчиненныхОбъектах(Строка, КоличествоЗаписей);
			
		Иначе
			
			Строка.КоличествоЗаписей = КоличествоЗаписей.Получить(Строка.ОбъектОбмена);	
			
		КонецЕсли;
		
		Попытка
			
			// чтобы там, где не подсчитано, не показывался 0, колонка КоличествоЗаписей
			// имеет составной тип "Число,Строка"
			
			СуммаПоУзлу = СуммаПоУзлу + Строка.КоличествоЗаписей;
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ТекущиеДанные.КоличествоЗаписей = СуммаПоУзлу;
		
	КонецЕсли;
	
КонецПроцедуры // ПереключитьФлагиВПодчиненныхОбъектах()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОбновитьКоличествоЗаписей()
	
	КоличествоЗаписей = зс_веб_ОбменДаннымиОбщий.ПолучитьКоличествоЗаписейДляОбмена(Объект.Ссылка);

	Для каждого Строка из ДеревоНастроекОбмена.ПолучитьЭлементы() Цикл
		
		Строка.КоличествоЗаписей = КоличествоЗаписей.Получить(Строка.ОбъектОбмена);	
		
		ОбновитьКоличествоЗаписейВПодчиненныхОбъектах(Строка, КоличествоЗаписей);
		
	КонецЦикла;

КонецПроцедуры // ОбновитьКоличествоЗаписей()

&НаКлиенте
Процедура ПолучитьПодчиненныеОбъектыОбмена(ТекущиеДанные, МассивОбъектовОбмена)

	Для каждого Строка из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			ПолучитьПодчиненныеОбъектыОбмена(Строка, МассивОбъектовОбмена);
			
		Иначе
			
			Если Строка.Включено Тогда
			
				МассивОбъектовОбмена.Добавить(Строка.ОбъектОбмена);	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ВыполнитьОбменОднимОбъектом(СтрокаДерева, РежимОбменаПолный)

	Если НЕ СтрокаДерева.ЭтоГруппа Тогда
		
		МассивОбъектовОбмена = Новый Массив;
		МассивОбъектовОбмена.Добавить(СтрокаДерева.ОбъектОбмена);
		
		ПараметрыОбмена = зс_веб_ОбменДаннымиОбщий.ИнициализироватьПараметрыОбмена(Объект.Ссылка);
		ПараметрыОбмена.СохранятьВЛогТолькоОшибки = Ложь;
		ПараметрыОбмена.РежимОбменаПолный = РежимОбменаПолный;
	
		зс_веб_ОбменДаннымиВыгрузка.ВыгрузитьОбъектыОбмена(МассивОбъектовОбмена, ПараметрыОбмена);
		зс_веб_ОбменДаннымиЗагрузка.ЗагрузитьОбъектыОбмена(ПараметрыОбмена, МассивОбъектовОбмена);
	
	Иначе
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Операция недоступна для группы");
		
	КонецЕсли;
	

КонецПроцедуры // ВыполнитьОбменОднимОбъектом()

&НаСервере
Процедура ПрочитатьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючРегламентногоЗаданияОбмена = Объект.Ссылка.УникальныйИдентификатор();
	
	Если НЕ ЗначениеЗаполнено(КлючРегламентногоЗаданияОбмена) Тогда // элемент не записан
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Ключ", КлючРегламентногоЗаданияОбмена);
	
	МассивЗаданий = зс_веб_РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	
	Если МассивЗаданий.Количество() = 0 Тогда
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдено регламентное задание для обмена по настройке обмена. Перезапишите настройку обмена.");
		
	ИначеЕсли МассивЗаданий.Количество() = 1 Тогда
		
		ЗаданиеОбменССайтом = МассивЗаданий[0];
		
		Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = Истина;
		Элементы.РегламентноеЗаданиеИспользуется.Доступность = Истина;
		
		РегламентноеЗаданиеИспользуется = зс_веб_РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(ЗаданиеОбменССайтом);
		РасписаниеОбменаССайтом = зс_веб_РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(ЗаданиеОбменССайтом);
		
		ИдентификаторРегламентногоЗаданияОбмена = ЗаданиеОбменССайтом.УникальныйИдентификатор;
		
	Иначе
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Найдено несколько регламентных заданий обмена с одинаковым ключом для одной настройки обмена:"
							+ Символы.ПС
							+ КлючРегламентногоЗаданияОбмена
							+ Символы.ПС
							+ "Удалите лишние задания в консоли заданий.");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючРегламентногоЗаданияОбмена = Объект.Ссылка.УникальныйИдентификатор();
	
	Если НЕ ЗначениеЗаполнено(КлючРегламентногоЗаданияОбмена) Тогда // элемент не записан
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Наименование", "Обмен данными с сайтом [Настройка: " + Объект.Наименование + "]");
	ПараметрыЗадания.Вставить("Использование", РегламентноеЗаданиеИспользуется);
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.зс_веб_ОбменДаннымиССайтом);
	ПараметрыЗадания.Вставить("Ключ", КлючРегламентногоЗаданияОбмена);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый УникальныйИдентификатор(КлючРегламентногоЗаданияОбмена));
	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);	
	
	ПараметрыОтбора = Новый Структура("Ключ", КлючРегламентногоЗаданияОбмена);
	
	МассивЗаданий = зс_веб_РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	
	Если МассивЗаданий.Количество() = 0 Тогда
		
		ЗаданиеОбменССайтом = зс_веб_РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
		ИдентификаторРегламентногоЗаданияОбмена = ЗаданиеОбменССайтом.УникальныйИдентификатор;
		
		ПрочитатьНастройкиЗаданий();
		
	ИначеЕсли МассивЗаданий.Количество() = 1 Тогда
		
		ЗаданиеОбменССайтом = МассивЗаданий[0];
		
		Если ЗаданиеОбменССайтом.Наименование <> ПараметрыЗадания.Наименование ИЛИ
			ЗаданиеОбменССайтом.Использование <> ПараметрыЗадания.Использование ИЛИ
			ЗаданиеОбменССайтом.Ключ <> ПараметрыЗадания.Ключ Тогда
	
			зс_веб_РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторРегламентногоЗаданияОбмена, ПараметрыЗадания);
			
		КонецЕсли;
	
		ИдентификаторРегламентногоЗаданияОбмена = ЗаданиеОбменССайтом.УникальныйИдентификатор;
		
		ПрочитатьНастройкиЗаданий();
		
	Иначе
		
		зс_веб_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Найдено несколько регламентных заданий обмена с одинаковым ключом для одной настройки обмена:"
							+ Символы.ПС
							+ КлючРегламентногоЗаданияОбмена
							+ Символы.ПС
							+ "Удалите лишние задания в консоли заданий.");
		
	КонецЕсли;
						
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗадания()
	
	зс_веб_РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияОбмена, РасписаниеОбменаССайтом);
	
КонецПроцедуры

#КонецОбласти